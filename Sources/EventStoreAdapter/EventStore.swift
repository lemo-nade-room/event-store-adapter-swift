/// A protocol representing an Event Store in a CQRS/Event Sourcing system.
///
/// This protocol defines the methods required to store events and snapshots,
/// retrieve the latest snapshot, and fetch a range of events for a given aggregate.
///
/// # Japanese
/// CQRS/Event Sourcing システムにおけるイベントストアを表すプロトコル。
/// イベントやスナップショットの保存、最新スナップショットの取得、指定した範囲のイベント取得などを行うためのメソッドを定義します。
public protocol EventStore: Sendable {
    /// The type of event stored in this event store.
    ///
    /// # Japanese
    /// このイベントストアが扱うイベントの型。
    associatedtype Event: EventStoreAdapter.Event

    /// The aggregate type associated with the stored events.
    ///
    /// # Japanese
    /// このイベントストアで扱う集約の型。
    associatedtype Aggregate: EventStoreAdapter.Aggregate

    /// The type of Aggregate ID.
    ///
    /// # Japanese
    /// 集約のID型。
    associatedtype AID: EventStoreAdapter.AggregateId

    /// Persists an event into the store.
    ///
    /// - Parameters:
    ///   - event: The event to be persisted.
    ///   - version: The current version of the aggregate (used for optimistic locking).
    /// - Throws: A write error of type ``EventStoreWriteError``.
    ///
    /// Use this method to store an event generated by an **existing** aggregate.
    /// You should pass the exact `version` of the aggregate as is.
    ///
    /// # Japanese
    /// イベントをストアに永続化します。
    ///
    /// - Parameters:
    ///   - event: 永続化するイベント。
    ///   - version: 集約の現在のバージョン（楽観的ロック用）。
    /// - Throws: ``EventStoreWriteError`` 型の書き込みエラー。
    ///
    /// すでに存在する集約から生成されたイベントを保存するときに使用します。
    /// 集約の `version` をそのままこのメソッドの引数に渡してください。
    func persistEvent(event: Event, version: Int) async throws

    /// Persists an event and the corresponding aggregate snapshot.
    ///
    /// - Parameters:
    ///   - event: The event to be persisted.
    ///   - aggregate: The aggregate snapshot to be persisted.
    /// - Throws: A write error of type ``EventStoreWriteError``.
    ///
    /// Call this method when **creating a new aggregate** or when you need to save
    /// both the event and a snapshot of the aggregate in the same operation.
    ///
    /// # Japanese
    /// イベントと、それに対応する集約のスナップショットを永続化します。
    ///
    /// - Parameters:
    ///   - event: 永続化するイベント。
    ///   - aggregate: 永続化する集約のスナップショット。
    /// - Throws: ``EventStoreWriteError`` 型の書き込みエラー。
    ///
    /// 新規に集約を作成した際に、必ずこのメソッドでイベントとスナップショットを同時に保存してください。
    func persistEventAndSnapshot(event: Event, aggregate: Aggregate) async throws

    /// Retrieves the latest snapshot for a given aggregate ID.
    ///
    /// - Parameter aid: The aggregate ID.
    /// - Throws: A read error of type ``EventStoreReadError`` if retrieval fails.
    /// - Returns: The latest snapshot of the aggregate, or `nil` if it does not exist.
    ///
    /// # Japanese
    /// 指定した集約IDに対応する最新のスナップショットを取得します。
    ///
    /// - Parameter aid: 集約ID。
    /// - Throws: ``EventStoreReadError`` 型の読み込みエラー。
    /// - Returns: 集約の最新スナップショット。存在しない場合は `nil` を返します。
    func getLatestSnapshotByAID(aid: AID) async throws -> Aggregate?

    /// Retrieves all events for the specified aggregate since the given sequence number, in ascending order.
    ///
    /// - Parameters:
    ///   - aid: The aggregate ID.
    ///   - seqNr: The starting sequence number (inclusive).
    /// - Throws: A read error of type ``EventStoreReadError``.
    /// - Returns: An array of events in ascending order by sequence number (including `seqNr` itself).
    ///
    /// To fetch all events after a particular snapshot, pass `snapshot.seqNr + 1` as `seqNr`.
    ///
    /// # Japanese
    /// 指定したシーケンシャル番号（連番）以降の集約イベントを、昇順で取得します。
    ///
    /// - Parameters:
    ///   - aid: 集約ID。
    ///   - seqNr: 開始シーケンス番号（含まれる）。
    /// - Throws: ``EventStoreReadError`` 型の読み込みエラー。
    /// - Returns: シーケンシャル番号順で並んだイベントの配列（`seqNr` と同じ番号のイベントも含む）。
    ///
    /// スナップショット以降のイベントを取得する場合は、`snapshot.seqNr + 1` を引数に指定してください。
    func getEventsByAIDSinceSequenceNumber(aid: AID, seqNr: Int) async throws -> [Event]
}

/// Errors that may occur when writing to the event store.
///
/// # Japanese
/// イベントストアへの書き込み時に発生する可能性があるエラー。
public enum EventStoreWriteError: Swift.Error {
    /// An error related to event serialization.
    ///
    /// # Japanese
    /// イベントのシリアライズに関連するエラー。
    case serializationError(any Error)

    /// An optimistic lock failure.
    ///
    /// # Japanese
    /// 楽観ロックに失敗したことを示すエラー。
    case optimisticLockError((any Error)?)

    /// An I/O error occurred.
    ///
    /// # Japanese
    /// I/O 処理中にエラーが発生した場合。
    case IOError(any Error)

    /// A miscellaneous error with an associated message.
    ///
    /// # Japanese
    /// その他のエラー。メッセージを伴います。
    case otherError(String)
}

/// Errors that may occur when reading from the event store.
///
/// # Japanese
/// イベントストアからの読み込み時に発生する可能性があるエラー。
public enum EventStoreReadError: Swift.Error {
    /// An error occurred while deserializing data.
    ///
    /// # Japanese
    /// デシリアライズ中に発生したエラー。
    case deserializationError(any Swift.Error)

    /// An I/O error occurred.
    ///
    /// # Japanese
    /// I/O 処理中にエラーが発生した場合。
    case IOError(any Swift.Error)

    /// A miscellaneous error with an associated message.
    ///
    /// # Japanese
    /// その他のエラー。メッセージを伴います。
    case otherError(String)
}
