name: ci
on:
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/ci.yaml"
      - "**.swift"
      - ".swift-format"
      - "compose.yaml"
      - "Package.resolved"
  pull_request:
    branches: [ main ]
    paths:
      - ".github/workflows/ci.yaml"
      - "**.swift"
      - ".swift-format"
      - "compose.yaml"
      - "Package.resolved"
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
#  lint:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: Homebrew/actions/setup-homebrew@master
#      - run: brew install swift-format
#      - run: swift format lint -s --configuration .swift-format -r Sources Tests Package.swift
#  build:
#    runs-on: ubuntu-latest
#    needs: lint
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/cache@v4
#        with:
#          key: swift-build-package-resolved-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Package.resolved') }}
#          path: .build
#      - uses: swift-actions/setup-swift@v2
#        with:
#          swift-version: "6.0"
#      - run: swift build
#  test-small:
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/cache@v4
#        with:
#          key: swift-build-package-resolved-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Package.resolved') }}
#          path: .build
#      - uses: swift-actions/setup-swift@v2
#        with:
#          swift-version: "6.0"
#      - run: swift test
#        env:
#          TEST_LEVEL: small
  test-medium:
    runs-on: ubuntu-latest
#    needs: test-small
    steps:
      - uses: actions/checkout@v4
      - run: docker compose up -d
      - uses: actions/cache@v4
        with:
          key: swift-build-package-resolved-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('Package.resolved') }}
          path: .build
      - uses: swift-actions/setup-swift@v2
        with:
          swift-version: "6.0"
      - run: swift test
        env:
          TEST_LEVEL: medium
          AWS_ACCESS_KEY_ID: dummy
          AWS_SECRET_ACCESS_KEY: dummy
      - if: always()
        run: docker compose down